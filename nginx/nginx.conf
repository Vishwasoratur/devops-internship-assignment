# nginx/nginx.conf

# IMPORTANT: This file is included by the main Nginx configuration.
# Global directives like 'worker_processes', 'events', 'http', and 'log_format'
# should NOT be present here as they are already defined in the primary nginx.conf.

# Only include server blocks (or upstream blocks) and directives allowed within them.

# Server block: Defines a virtual host for our reverse proxy
server {
    # Listen on port 80 inside the container
    listen 80;
    server_name localhost; # Can be an IP address or domain name

    # Access log file path and format for this server block
    # The 'custom_log' format itself must be defined in the main http block.
    # We are assuming the default Nginx configuration provides a 'combined' log format,
    # or that a 'custom_log' format could be implicitly available if defined elsewhere.
    # For this assignment, we will use 'combined' or rely on the host's log format.
    # Alternatively, if custom_log is mandatory, it must be defined in the main /etc/nginx/nginx.conf
    # This is often done by modifying the base image or using a custom base Nginx image.
    # For now, let's revert to a common format if custom_log isn't globally defined.
    # Let's assume the default Nginx has 'main' or 'combined' log formats.
    # Given the constraint to only use this file, we cannot define 'log_format' here.
    # So, we'll use a standard one, e.g., 'combined', which is built-in.
    access_log /var/log/nginx/access.log combined; # Changed from custom_log to combined

    # Error log file path and level for this server block
    error_log /var/log/nginx/error.log warn; # Set to debug if you need more detailed routing logs

    # Sendfile directive improves performance for static file serving
    sendfile on;
    # tcp_nopush on; # Recommended with sendfile for optimizing packet sending

    # Keep-alive timeout for client connections
    keepalive_timeout 65;

    # Gzip compression for faster loading
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_comp_level 6; # Compression level


    # Location block for /service1 requests
    location /service1/ {
        # Add a custom header to indicate successful routing to Service 1
        add_header X-Proxied-To "Service 1 (Go App)";
        # Optional: specific debug logging for this location (for troubleshooting)
        # error_log /var/log/nginx/error.log debug;
        
        # Proxy pass to the service_1 container (Docker Compose service name)
        # The service_1 container listens on port 8001
        proxy_pass http://service_1:8001/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Location block for /service2 requests
    location /service2/ {
        # Add a custom header to indicate successful routing to Service 2
        add_header X-Proxied-To "Service 2 (Python App)";
        # Optional: specific debug logging for this location (for troubleshooting)
        # error_log /var/log/nginx/error.log debug;

        # Proxy pass to the service_2 container (Docker Compose service name)
        # The service_2 container listens on port 8002
        proxy_pass http://service_2:8002/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    # Default location block for requests that don't match /service1 or /service2
    location / {
        return 404 "Sorry, this path is not found on the proxy.";
    }
}

